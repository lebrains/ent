// Package internal Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// template/main.tmpl
// schema.go
package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateMainTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x51\x5f\x6b\xdb\x3e\x14\x7d\xb6\x3e\xc5\xf9\x99\xfe\xa8\xdd\xa5\x4a\xdb\xb7\x0d\xf2\x50\xda\x0c\x32\xb6\x76\x90\xc2\x1e\xba\x52\x14\xfb\x3a\x11\x75\x24\xef\x4a\x29\x0b\x42\xdf\x7d\x48\x4e\xc2\xf6\x64\x4b\xe7\xdc\xf3\x47\x37\x84\xe9\x85\xb8\xb3\xc3\x9e\xf5\x7a\xe3\x71\x73\x75\xfd\xf1\x72\x60\x72\x64\x3c\x3e\xab\x86\x56\xd6\xbe\x61\x61\x1a\x89\xdb\xbe\x47\x26\x39\x24\x9c\xdf\xa9\x95\xe2\x69\xa3\x1d\x9c\xdd\x71\x43\x68\x6c\x4b\xd0\x0e\xbd\x6e\xc8\x38\x6a\xb1\x33\x2d\x31\xfc\x86\x70\x3b\xa8\x66\x43\xb8\x91\x57\x47\x14\x9d\xdd\x99\x56\x68\x93\xf1\xaf\x8b\xbb\xf9\xc3\x72\x8e\x4e\xf7\x84\xc3\x1d\x5b\xeb\xd1\x6a\xa6\xc6\x5b\xde\xc3\x76\xf0\x7f\x99\x79\x26\x92\xe2\x62\x1a\xa3\x10\x21\xa0\xa5\x4e\x1b\x42\xb9\x55\xda\x94\x88\x51\x4c\xa7\xb8\x4b\x79\xd6\x64\x88\x95\xa7\x16\xab\x3d\xce\xc9\xf8\xe6\x74\x75\x2e\x71\xff\x88\x87\xc7\x27\xcc\xef\x17\x4f\x52\x0c\xaa\x79\x53\x6b\x42\xd2\x10\x42\x6f\x07\xcb\x1e\x95\x28\x4a\xeb\x4a\x51\x94\xab\xbd\xa7\xf4\x13\x02\x3c\x6d\x87\x5e\x79\x42\x39\xb2\x5c\xb6\xcc\xd0\xc0\xda\xf8\x0e\xe5\xff\xbf\x4a\xc8\xef\x07\xc5\x18\x45\x9d\x63\x9e\xad\x94\x23\x7c\x9a\x21\x7f\x8f\x78\x9a\x7d\x57\x0c\xd7\x6c\x68\xab\x1c\x66\x78\x7e\x21\xe3\xe5\xc2\x78\xe2\x4e\x35\x14\xb2\x34\x2b\xb3\x26\x9c\xbd\x4e\x70\x66\xd4\x36\xcb\xc8\x07\xb5\x25\x97\xf4\x8b\x22\x84\xcb\x83\x7e\x8c\x32\x1d\x4e\x51\x5c\x88\xe5\x61\x26\xc6\x49\xd6\x22\xd3\xe2\x32\x46\x11\x85\xe8\x76\xa6\xc9\x9d\xab\x1a\x41\x14\x29\x48\xaf\x0d\x39\x3c\xbf\x3c\xbf\xa4\xd2\xa2\xe8\x2c\xe3\x75\x72\xc8\x97\x7c\xc7\x28\xc7\xbc\x41\x14\xc5\x6a\x02\x62\x4e\xd8\x37\xc5\x6e\xa3\xfa\x65\x06\xab\x91\x53\x8b\xa2\xd0\x5d\x66\xfc\x37\x83\xd1\x7d\x9e\x29\x3a\xa5\xfb\x8a\x98\x13\x9c\x2a\x8c\xbe\x33\xa8\x61\x20\xd3\x56\xf9\x38\xc1\xaa\x16\x09\xb5\x4e\x2e\x7d\x6b\x77\x5e\xfe\x60\xed\xa9\xca\xfb\x90\x5f\xac\x36\x47\xe2\x18\xb7\x2a\x7f\x9a\xb2\xae\xeb\x53\xb7\xa3\x4b\xb2\xb7\x9c\x4b\x8e\x5a\xc4\x3c\x6a\x2d\x3d\x6b\xb3\x4e\x1c\x39\x4f\x9c\xaa\xfe\x90\x45\x32\x71\xfe\x5b\xfb\xea\x3a\xcb\xfd\xb3\xfa\xb1\xd9\xb8\xf9\xc3\x8b\xc6\x28\xfe\x04\x00\x00\xff\xff\x95\x06\x0f\xa4\x50\x03\x00\x00")

func templateMainTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateMainTmpl,
		"template/main.tmpl",
	)
}

func templateMainTmpl() (*asset, error) {
	bytes, err := templateMainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/main.tmpl", size: 848, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemaGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x5a\x5d\x6f\xdc\xb6\xd2\xbe\x5e\xfd\x8a\x89\x81\x18\x52\xb0\xd5\xa6\x45\x51\xbc\xef\xe6\xec\x01\x8a\x36\x41\xf7\xf4\xc4\x09\x9a\xa4\x37\x41\x90\xca\x12\xb5\xcb\x58\xa2\x14\x91\xeb\x78\xeb\xfa\xbf\x1f\xcc\x0c\x29\x51\x1f\xbb\xce\x87\xbd\x37\x96\x86\x33\xe4\xf0\xe1\xf0\x99\x21\xe5\xc5\x02\x7e\xa9\xea\x7d\x23\x37\x5b\x03\x3f\x3c\xfe\xfe\xff\xbf\xab\x1b\xa1\x85\x32\xf0\x2c\x49\xc5\x79\x55\x5d\xc0\x5a\xa5\x31\xfc\x5c\x14\x40\x4a\x1a\xb0\xbd\xb9\x14\x59\x1c\x2c\x16\xf0\x7a\x2b\x35\xe8\x6a\xd7\xa4\x02\xd2\x2a\x13\x20\x35\x14\x32\x15\x4a\x8b\x0c\x76\x2a\x13\x0d\x98\xad\x80\x9f\xeb\x24\xdd\x0a\xf8\x21\x7e\xec\x5a\x21\xaf\x76\x2a\xc3\x2e\xa4\x22\x95\xff\xae\x7f\x79\x7a\xf6\xea\x29\xe4\xb2\x10\x4e\xd6\x54\x95\x81\x4c\x36\x22\x35\x55\xb3\x87\x2a\x07\xe3\x8d\x67\x1a\x21\xe2\x20\xa8\x93\xf4\x22\xd9\x08\x28\xaa\x24\x0b\x02\x59\xd6\x55\x63\x20\x0c\x66\x27\x42\xa5\x55\x26\xd5\x66\xf1\x41\x57\xea\x24\x98\x9d\xe4\xa5\xc1\x3f\x8d\xc8\x0b\x91\x9a\x93\x20\x98\x9d\x6c\xa4\xd9\xee\xce\xe3\xb4\x2a\x17\xb9\x9d\xb0\x54\xe9\xee\x3c\x31\x55\xb3\x10\x8a\xf4\x6f\xd3\x59\xe8\x74\x2b\xca\x64\x21\xb2\x8d\xf8\x12\xfd\x5c\x8a\x22\xfb\x12\x03\xa9\x32\x71\x75\x12\x44\x01\xc2\xf6\x8a\x64\xd0\x08\xbb\x60\x1a\x12\x05\x42\x99\xd8\x36\x98\x6d\x62\xe0\x53\xa2\x09\x17\x91\x41\xde\x54\x25\x24\x90\x56\x65\x5d\x48\x5c\x1c\x2d\x1a\xb0\xd8\xc5\x81\xd9\xd7\xc2\x75\xa9\x4d\xb3\x4b\x0d\x5c\x07\xb3\xb3\xa4\x14\x00\x80\x12\xa9\x36\x40\xbf\xbf\x10\xcd\xe5\x89\x4a\x4a\x31\xaf\x4a\x69\x44\x59\x9b\xfd\xc9\x5f\xc1\xec\x97\x4a\xe5\x72\x03\xe4\x83\x7b\xb6\xca\x29\xbd\xf6\xd5\x9f\x66\x1b\xa1\x01\xe0\xed\xbb\x47\xf8\xe8\xf7\x8d\x40\xea\xbe\xf6\x33\xc4\x4a\x93\x36\x3d\x7a\xda\x04\xe3\x40\x7d\x8d\x48\x09\x8d\xea\xf4\xe8\xa9\x4b\x6e\xea\xeb\xff\x56\x55\x17\xd6\x99\x97\x95\x96\x46\x56\xca\xe9\x6f\xb1\xa9\xaf\xfd\xb2\x2a\x64\xba\x07\x38\xaf\xaa\x02\xa0\x07\x4b\x4d\x4d\x3d\xf5\x1b\x5a\xae\xb6\xdb\x4c\xe8\xb4\x91\xe7\x42\x43\x02\xe4\x3a\xd4\xae\xc9\x46\x3d\xaf\xb6\x5d\x93\xd6\xae\x5b\x95\x76\x46\x00\x52\x19\x80\xc5\x02\x18\x13\x9a\x9a\xeb\x85\xfb\x2e\xa4\x36\x71\x30\x7b\x2e\xaf\x44\xb6\x56\x68\x42\x4e\x2f\x16\xb0\x56\x99\x4c\x13\x23\x34\xc8\xdc\x33\xc0\x88\x29\x51\xfb\x3b\xa9\xd8\x50\xaa\xb5\xed\x97\xc7\x22\x51\x7f\xac\x92\x44\x3c\x16\x4f\x97\x1d\x1a\x07\x27\xcb\xbf\x22\x36\xd9\x70\x1c\x9a\xfc\xf3\x03\xf4\x96\x30\x5d\xab\xbc\xea\xd4\x1e\xd1\xac\xe3\xd7\xfb\x5a\xd8\x06\x6b\x88\x83\xf6\x0d\x5f\x27\xfe\x00\x07\x47\x34\xc9\x20\xd0\x5f\xc9\xbf\x3d\x4f\x1f\x49\x65\x7e\xfa\x71\xc2\x4e\xcb\xbf\x07\x03\x3e\x55\xbb\x52\xb7\x6a\x6f\xdf\x0d\x87\x74\xbb\x05\xd5\xfa\x96\x6f\x94\xfc\xb8\x6b\x07\xf5\xc3\xb4\x67\xb9\x23\xb5\xbe\xe9\x99\x2c\x8a\xe4\xbc\x10\xb7\x98\x2a\xab\xd6\x37\x7e\x51\x63\xa8\x26\xc5\x2d\xc6\x95\x55\xeb\x1b\xff\x2a\xf2\x64\x57\x98\xdb\x9c\xce\x58\x6d\xd2\xf6\xcf\xa4\xc0\x69\x4b\x65\x44\x83\x4c\x7a\x7d\x33\x69\xfb\xfe\x12\xf5\x06\x90\xd5\x59\x62\x84\xf3\xe1\x30\x64\xa4\xf6\x7e\xd2\x89\x75\x59\xee\x4c\x8b\xdd\xc1\x2e\xa4\x53\xeb\x5b\xff\x99\x14\x32\x43\xc6\xa7\x25\xa7\xcd\x36\x65\x7d\xd9\xaa\x0d\xa2\xcc\x54\x4d\xb2\x11\xbf\x8b\x3d\x1c\x8b\x4e\xcd\x6a\xef\x2f\xc4\x7e\xc8\x69\x96\x67\xe8\xf7\xa8\xff\xea\xf3\x1b\xcb\x07\x83\x0b\x85\xe2\xcb\x5b\x66\xae\x9d\xda\xc0\x9a\xf8\x0e\xb7\x20\xea\x96\x49\xfd\x96\xdd\x77\x01\xef\xac\x49\xed\xfd\x68\x63\x32\xe1\x50\x0e\x19\xf3\x0d\x89\xbf\x82\x6e\xc8\x6e\x92\x6d\xfa\x4e\x8d\xf9\xc5\xcd\x63\xa4\x7a\x94\x51\x06\xaa\x43\x0e\xf9\x43\xe4\x83\x5c\x6c\x35\x1b\x91\xbf\x1f\xfb\xf0\x87\xc8\x5d\xc7\x36\xb9\x76\xea\x07\x99\xc2\x2e\xdb\x11\x6e\x58\xab\x4b\xd1\x68\x31\x56\x96\xdc\x30\x74\xe2\xe3\x4e\x36\x22\x1b\x69\x37\xb6\xe1\x60\x00\x0f\xd6\xfd\x40\xc8\xf2\xba\x73\x6e\x1a\x2f\x3c\xcb\xbf\x62\xe5\xd9\xb0\x5b\xfa\x31\x42\x47\x31\x72\x65\x8d\xcf\xd8\xb7\x97\x35\x13\xda\x53\x65\xcd\x18\xa3\x5b\x37\x36\xa3\x74\x26\x3e\x51\x1c\xa4\x8d\xa0\x94\x9f\x28\x87\x08\x3a\xc5\xb0\xd0\x13\x57\x27\xb5\xa9\x9a\x38\xc8\x77\x2a\x75\x96\xa1\xc8\xe0\x11\x6a\xc4\xbf\xb6\x1a\x91\x0d\xae\xeb\x60\xa6\x04\x2c\x57\x70\x8a\xaf\xd7\xc1\x0c\x03\x7b\xe9\x02\x50\x64\xf1\xeb\x64\x33\x47\xe9\xbe\x16\x4b\x4f\x8a\xfb\x21\x98\xd1\xde\xf2\xc4\xf8\x8a\x62\xc6\x7d\xe9\xc4\xfc\x8a\x0d\x36\x0a\x97\xb6\xc1\xbe\x62\x8b\x8b\xb8\x25\xb7\xb8\x57\x6e\xca\xdb\x71\xa8\x29\x77\xe3\x74\x98\x2e\xb1\xa5\x7b\x9d\x07\xb3\x9b\x60\x26\x73\x68\x44\x8e\xb3\x63\xb3\x27\xf4\xfa\x60\x05\x4a\x16\x38\xf3\x99\x12\x28\x86\x55\x8b\x54\x23\xf2\x88\x4c\x1b\x61\x76\x8d\x02\x25\xba\x45\xe0\x2a\x66\xbc\x0a\x5c\x7b\xd1\x32\xf0\xe3\xd4\x3a\x90\x71\x98\x67\xae\x68\xf1\x57\x22\xe4\xb2\x78\x0e\xa2\x69\xf0\xfd\x3a\x98\x69\xf2\xfa\x94\xe4\xd7\x03\x9c\x01\x20\xef\xa0\xc6\xca\xa7\xdf\x82\x92\xf9\x60\x21\xb9\xc5\xae\x25\xd5\x26\x4b\xbf\x81\x24\xc3\x85\xe3\xa6\x6e\xed\x5c\x75\xb1\xec\x7c\x70\x85\x44\x30\x6b\xcb\x87\xae\xd5\x49\xb0\xd5\xe6\xe6\x65\xd7\xaf\xcb\xd6\xbc\x1a\x34\xb6\x9f\xc5\x97\x34\x76\x2f\xaf\x77\x9a\x6d\xb2\x5e\xb6\x73\x6e\xf3\xf2\x20\x2a\xb8\xb9\x17\x18\x5e\xb6\xa6\xf6\x42\xa8\x30\xcf\xe2\x4e\x1a\x51\x27\x2e\xdf\xb5\x63\xb4\x12\x6a\x6e\xf3\x5e\x3b\x46\x2b\x69\x83\x4f\xe7\xb4\x18\xb0\xea\x22\xce\xc5\x95\x2c\xe6\x90\x97\x26\x7e\x8a\x4b\x9e\x87\x27\xa5\xd4\x1a\x39\x81\x68\x4c\xa2\x51\x5e\x35\x36\x9e\x1e\x7e\x3c\x99\x63\x5f\xb8\xe4\x51\xdb\x37\x56\xa6\xcb\x15\x50\x49\x8a\xfe\x63\xa9\x1a\x3d\x61\xf9\x83\x15\x3c\xa6\xe1\x74\x4e\x72\x58\xc1\x29\x36\x90\x31\x12\x2f\x9f\x1a\x6c\x25\x04\x54\x52\x41\x9a\x28\x38\x17\x40\x27\x6f\x91\x81\xa9\x48\x67\x23\x94\x68\x12\x8a\x65\xb4\x7c\x56\x35\x20\xae\x92\xb2\x2e\xc4\x1c\x54\x65\xf0\x20\xb4\x53\x29\x95\x1b\x85\xbc\x10\x60\x64\x29\xe2\xb3\xea\x53\x4c\x5e\xbe\xa7\xa0\x46\x3f\x91\xe9\xe2\xe7\x49\xa3\xb7\x49\x11\x76\xeb\x1f\x3d\x21\x05\x0f\x21\x9d\xc7\xbd\x8a\x70\xe5\x45\x8b\x9b\xbc\x8d\x72\xa2\x21\xb4\xed\x0e\x02\x6f\xde\xac\x7f\x85\xd3\xd3\x71\x84\x51\xdf\x66\x5f\xa3\x2f\xf6\x12\x81\x0c\x5e\xe4\xbe\x37\xc1\x0c\xbb\x37\xfb\x3a\xfe\x5d\xaa\x2c\x8c\xd0\xd8\x69\x3f\xc3\xad\xfc\xcf\x3f\xd4\x7a\xb6\x2b\xd7\x8a\x9b\x1f\x7b\xb2\x17\x3b\xc3\xc2\xef\x9d\x10\x25\x8f\xa3\xf8\x15\x31\x3e\xb7\x39\xe7\x5b\x19\x7a\x76\x30\x30\xc4\x55\x2d\x52\xc3\x71\x11\x22\xd4\x61\x04\x0f\x75\x44\xe1\xb1\xdb\xc9\xac\xbf\x88\x27\xf3\x51\xf7\x38\xa7\x1b\x9f\xd3\x74\x3e\xc7\x61\x3a\x62\xe3\xac\x39\x26\x36\x3e\x26\x12\xb1\xf1\xe3\x14\xb1\x91\x71\x28\xb3\x2b\x3c\x1d\x65\xe2\xaa\x9f\x63\xb8\xeb\xeb\x76\xec\x53\x12\xe0\x84\x29\xd7\x5a\x3e\x90\xd9\x15\x15\x7b\x44\x41\x9c\x56\x97\x6d\x03\xbf\x0f\xc9\x09\x5b\x3a\x6a\xf2\x77\x3c\xb6\x0c\x12\x01\xcf\xd4\x06\x9f\xbd\x28\xe1\x30\xa7\x10\xf7\x2e\x5e\xda\xd3\x07\x3e\x55\x90\xc0\x7f\x5e\xbd\x38\x43\x63\x2a\x46\xec\x0e\xc9\x04\xef\x10\x52\xc1\x0e\xac\x71\x75\xfe\x01\x97\x8a\xff\x58\x84\x7a\x83\x86\xda\x8d\x8d\x35\x8e\x1d\x29\x82\xf0\x1c\xde\xbe\x3b\xdf\x1b\xc1\x9b\xc5\xcb\x02\x94\x04\xd8\x16\x31\xe3\x9b\x99\xa5\xbb\x64\xe0\xd7\x30\xf2\x13\xb1\x54\x7c\xe5\x16\x0e\x62\x9c\x4d\xa2\x88\x48\x84\x4c\x78\x27\xd9\xdd\xa9\x63\x5c\x73\xba\x1d\x70\xaa\xbc\x31\x1f\xdc\x4e\x5d\x76\x52\x0f\x3f\x2e\xe1\xe1\x25\x32\x15\xe7\x26\x34\x8f\x26\x87\xe1\x15\xbd\xfb\x71\xb8\x46\x6b\xc7\x4a\x72\x41\x41\xe5\x06\x6a\x1d\xb9\x8b\xb1\x70\xfb\x21\xb9\x11\x9d\x24\x6a\x23\xa8\x04\xd3\xcc\x60\x1c\xcc\xb0\x82\xa4\xae\x85\xca\x42\x2b\x98\x77\x05\x99\xb7\x4b\xc2\x28\xb2\x30\xd9\xcb\x2d\x7f\x02\xf6\x2e\xec\x3e\xa7\x80\x5b\xb7\x9d\x84\xf5\xc1\x4e\xc3\xdd\xc4\x79\x13\x59\x3b\x27\xfd\xad\x3f\x39\x9b\xc1\xa2\xd3\x2d\xdd\xfd\xc7\x16\x5f\xef\xdd\xfd\x38\xd6\xb0\x97\xc5\x74\x64\x99\xe5\x8d\x2a\x7b\xdc\xc2\x04\xa1\x39\x7f\xca\x4b\xa1\xe0\x7c\x97\xe7\xa2\x01\xa2\x14\xcb\xae\xee\xa6\x90\x68\x62\xd0\x43\x78\xbe\xcb\x2d\x27\x60\x79\xc8\xc2\xf9\x21\x66\xe8\xc1\x40\x1e\xb6\xdd\x61\x47\x73\xd0\xc7\x81\x10\x4d\xe3\x07\x44\xde\x85\x83\xb6\xec\x4b\x26\xdd\x18\x79\x6c\x93\x8e\x0e\xc7\x3d\x8f\xbb\x1e\xa4\x1f\x3f\xfb\xb4\xac\x43\x4f\xda\x5e\x46\x9a\xca\xa2\x63\x0f\x37\x3e\x5d\x5a\xc0\x42\x0d\x16\x96\x08\x86\xd4\x35\xe4\x57\x82\x0d\x7d\xa3\xde\x7b\xfb\xab\xc7\x78\x47\x76\x97\x0f\x91\x9c\x43\xe9\x6d\x19\x76\x99\x4e\x13\x78\xca\xa7\x92\x6c\x9a\x83\xcb\xab\x96\x7f\x83\xd9\xcc\x9e\x11\x7d\x6f\x2c\x31\x96\x57\x51\x07\xf7\x04\xb2\xfd\xba\x11\x47\x6f\xe3\x56\x79\x51\x8b\xfe\x92\xc3\x1f\x7a\x6b\x9a\x77\x2b\x3a\xc3\x52\xc0\x8e\xdf\x9d\x51\xfa\xbb\x19\xd5\x26\x5c\xf9\x52\x5f\xc8\x19\xac\xed\xda\xcb\xa9\x15\x9c\xba\x67\xee\x91\xe8\xc4\x56\x04\x1f\xe6\x24\xb2\x57\xdf\x24\x34\x0d\xe7\xfa\x99\x77\xaf\xbd\x04\x39\xef\x3a\x77\xc1\xea\xd1\x95\x2d\x1e\x40\xe7\x0e\x90\x43\x49\xe2\xae\x41\x3f\x94\x1c\xbe\x2a\x3b\x50\xaf\xc7\xf2\xc3\x3d\x78\x7f\x30\x2f\x7c\x4b\x62\xa0\x01\xf8\xab\x8c\x3f\x0d\x4e\x0e\x77\x1e\xf7\x9d\xff\x34\xa4\xf3\x9e\x3f\x18\x79\xbe\xff\xc6\x0e\xdd\x61\x3c\x8e\x8a\xee\x3e\xe5\xd9\x40\x65\xce\xe3\x43\xde\x57\x70\x5e\xaf\x8e\x3a\x48\x7a\x87\x79\xe6\x8b\x69\x6f\x9a\x45\x3e\x8f\x44\x0e\x2f\x6b\x9b\x23\x0e\xd2\x83\xc3\x96\x74\x6e\xdb\xe5\x23\xcc\x27\xb1\xf3\xcb\x91\x83\xd0\x1d\x0a\xd4\x2f\x04\x6e\x2a\x0c\x3f\x37\x0a\xdb\x20\xe4\xc0\x6a\x03\x30\x4f\x0a\xbe\x37\xbb\xf9\xec\x29\xf7\x4a\xa3\x83\x73\xb6\x1f\x41\xfd\x49\xf7\x6b\xaa\xcf\x98\xb5\x8e\xed\x57\xd6\x15\x70\x77\x56\x77\xda\xcd\x1c\xf8\xfe\x2b\x82\xae\xaa\xe8\xfc\x91\x39\x3c\x68\x6f\x04\xf0\x54\xfd\x80\x2f\x55\xf0\xb8\x2d\x1a\x99\xda\xf3\xb3\xd7\x31\x7a\xa0\xe6\x50\x5d\x70\xa9\xe2\x5f\x26\xc4\x61\x5e\x54\x89\xf9\xe9\x47\x9e\xc5\x83\xea\xc2\x37\xf6\xf9\x65\xa7\xf8\xe0\x2d\x06\x07\x6c\x3e\x88\xb7\x77\x33\x4b\xbe\x9c\xf1\xef\x66\xf4\x27\x69\xd2\x2d\x18\x1e\xbd\xbd\xa6\x78\x82\x23\xa5\x89\x16\x60\xe0\xdf\xfe\x8d\xc5\x5a\x99\xff\x83\xd3\x53\x30\xf0\xaf\x81\xf8\xa7\x1f\x97\xc8\x64\xc3\xeb\x10\xbe\xf1\x51\xd1\x74\x77\x6f\xe4\x74\x7f\x6f\xe4\xc1\x0e\x77\x5d\x8f\x53\x84\xd5\x31\x06\x7c\x6a\x92\x5a\xfb\xdf\xb9\xad\x3c\x51\x19\xd7\x41\x4e\x50\x0a\xb3\xad\x32\xf8\x24\xcd\x16\x1a\x91\x56\x97\x5c\xfc\x0a\xa5\x77\x8d\x00\x55\x41\x9d\x28\x99\x6a\x90\x0a\x6c\xa5\x2a\xd5\xc6\xd2\x9c\xc7\x50\x79\xe6\x7d\x0f\x04\x2b\x8c\xe0\xed\xbb\xee\x73\xf4\x4d\x04\xa1\x25\x23\x4f\x3c\x3c\x49\x67\x02\xcb\x6f\x7b\x7d\x62\x8b\xd9\x4b\xbe\x0a\x22\xe7\xb0\x8e\xbd\xec\x91\x13\xdd\x4a\xf5\x42\xe2\xe1\x6b\x37\x3b\x76\xde\xa6\x9e\x3c\x9b\xc3\x25\x95\x38\xb9\x23\x26\x8a\x42\xe2\x7f\xac\xf4\x5c\x74\x65\xb1\x9b\xc0\x7c\x80\x2e\x17\x04\x23\x70\x59\xfc\xad\x50\xfa\x67\x60\x1f\x4d\x96\x3b\x30\xe9\x63\x00\x62\xc9\x95\x4a\x27\xbc\x0f\x24\x7b\xf3\xeb\x81\xc9\x40\x0a\x5b\x20\x4d\xe2\xe8\x1b\x8f\xa1\x74\x95\xc9\x08\x4c\xd7\xf0\xad\x70\xf6\x4f\xe4\x3e\xa0\xae\xc5\x41\xca\x77\x5f\x88\xa9\x6c\xff\xa3\xa5\x95\xdf\x23\xac\x6e\xa6\x13\xc0\xca\xb6\x6e\x3b\x06\x6d\x3b\x91\x21\xb8\x7c\x52\x1b\x41\xcb\xe2\x6f\x05\xf6\xd8\x09\x2e\xe4\x72\x8f\xf1\x7b\xde\x9d\xe2\xee\x05\x3f\x9e\xce\x04\x7a\xec\xc4\x71\xec\x78\x16\x23\xe4\x38\xd9\x8f\x90\x63\xf1\xb7\x22\xd7\xab\x65\xbc\x80\x64\xb9\x0b\x47\x7c\xa3\x68\xe4\x22\xa4\x13\xde\x23\x94\x3c\xbf\x09\x28\xb7\xb6\xf8\x39\x06\xa5\x75\x7f\x08\xa5\x2d\x2d\x46\x58\x5a\xf9\xb7\x82\x79\xb4\x4a\x0a\x6d\x39\x83\xe2\x97\x5e\xa1\x74\x2f\xe0\xd9\x09\x4d\xa0\x57\xbb\xea\xea\x18\x7c\x76\x22\x1d\x7e\x34\xc5\xf6\x6e\xc2\xf4\xbe\x82\x44\xbd\x37\x3a\x36\x54\x0d\x18\xf7\x15\x64\xd5\x7d\x05\x79\x69\x1a\xfe\x94\x02\x2b\x30\xf1\xd3\x42\x94\x61\xaf\x6e\x30\xc1\x4d\xf0\xbf\x00\x00\x00\xff\xff\xec\x38\x98\x03\x99\x2a\x00\x00")

func schemaGoBytes() ([]byte, error) {
	return bindataRead(
		_schemaGo,
		"schema.go",
	)
}

func schemaGo() (*asset, error) {
	bytes, err := schemaGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.go", size: 10905, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/main.tmpl": templateMainTmpl,
	"schema.go":          schemaGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.go": &bintree{schemaGo, map[string]*bintree{}},
	"template": &bintree{nil, map[string]*bintree{
		"main.tmpl": &bintree{templateMainTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
